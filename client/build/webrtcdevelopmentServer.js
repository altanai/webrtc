var enableLogs=!(exports.realtimecomm=function(n,e,s,a){var d,u={},l={},h={},m=[],t={},r=require("socket.io");try{(r=r(n)).set({transports:["websocket","polling"]}),r.origins("*:*"),r.on("connection",function(r){var t=r.handshake.query,n=t.msgEvent||"RTCMultiConnection-Message";t.enableScalableBroadcast&&(d||(d=require("./Scalable-Broadcast.js")),d(r,t.maxRelayLimitPerUser));{}function o(e){try{if(!u[e.sender])return void r.emit("user-not-found",e.sender);e.message.userLeft||u[e.sender].connectedWith[e.remoteUserId]||!u[e.remoteUserId]||(u[e.sender].connectedWith[e.remoteUserId]=u[e.remoteUserId].socket,u[e.sender].socket.emit("user-connected",e.remoteUserId),u[e.remoteUserId]||(u[e.remoteUserId]={socket:null,connectedWith:{},isPublic:!1,extra:{}}),u[e.remoteUserId].connectedWith[e.sender]=r,u[e.remoteUserId].socket&&u[e.remoteUserId].socket.emit("user-connected",e.sender)),u[e.sender].connectedWith[e.remoteUserId]&&u[r.userid]&&(e.extra=u[r.userid].extra,u[e.sender].connectedWith[e.remoteUserId].emit(n,e))}catch(e){pushLogs("onMessageCallback",e)}}r.userid=t.userid,f(r),r.on("extra-data-updated",function(e){try{if(!u[r.userid])return;for(var n in u[r.userid].extra=e,u[r.userid].connectedWith)u[n].socket.emit("extra-data-updated",r.userid,e)}catch(e){pushLogs("extra-data-updated",e)}}),r.on("changed-uuid",function(e,n){if(n=n||function(){},t.dontUpdateUserId)delete t.dontUpdateUserId;else try{if(u[r.userid]&&u[r.userid].socket.id==r.userid){if(e===r.userid)return;var s=r.userid;return u[e]=u[s],u[e].socket.userid=r.userid=e,delete u[s],void n()}r.userid=e,f(r),n()}catch(e){pushLogs("changed-uuid",e)}}),r.on("set-password",function(e){try{u[r.userid]&&(u[r.userid].password=e)}catch(e){pushLogs("set-password",e)}}),r.on("disconnect-with",function(e,n){try{if(u[r.userid]&&u[r.userid].connectedWith[e]&&(delete u[r.userid].connectedWith[e],r.emit("user-disconnected",e)),!u[e])return n();u[e].connectedWith[r.userid]&&(delete u[e].connectedWith[r.userid],u[e].socket.emit("user-disconnected",r.userid)),n()}catch(e){pushLogs("disconnect-with",e)}}),r.on("close-entire-session",function(e){try{var n=u[r.userid].connectedWith;Object.keys(n).forEach(function(e){if(n[e]&&n[e].emit)try{n[e].emit("closed-entire-session",r.userid,u[r.userid].extra)}catch(e){}}),delete l[r.userid],e()}catch(e){pushLogs("close-entire-session",e)}}),r.on("check-presence",function(e,n){if(e===r.userid&&u[e])n(!1,r.userid,u[e].extra);else{var s={};u[e]&&(s=u[e].extra),n(!!u[e],e,s)}}),r.on("open-channel",function(e){console.log("------------open channel------------- ",e.channel," by ",e.sender);var n=null;e.channel?n=e.channel:console.log(" Err :  channel is empty"),m.indexOf(n)<0?(m.push(n),console.log("registered new in channels ",m)):console.log("channel already exists channels ",m);try{h[n]={channel:n,timestamp:(new Date).toLocaleString(),maxAllowed:e.maxAllowed,users:[e.sender],status:"waiting",endtimestamp:0,log:[(new Date).toLocaleString()+":-channel created . User "+e.sender+" waiting "]},console.log("information added to channel",h)}catch(e){console.log(" Err : info couldnt be aded to channel ",e)}var s={status:!0,channel:n};r.emit("open-channel-resp",s)}),r.on("open-channel-screenshare",function(e){console.log("------------open channel screenshare------------- ",e.channel," by ",e.sender),r.emit("open-channel-screenshare-resp",!0)}),r.on("join-channel",function(e){var n=!1;if((h[e.channel].users.length<h[e.channel].maxAllowed||"unlimited"==h[e.channel].maxAllowed)&&(n=!0),console.log("------------join channel------------- ",e.channel," by ",e.sender," isallowed ",n),n){h[e.channel].users.push(e.sender),h[e.channel].status=h[e.channel].users.length+" active members",h[e.channel].log.push((new Date).toLocaleString()+":-User "+e.sender+" joined the channel ");var s={status:!0,channel:e.channel,users:h[e.channel].users};r.emit("join-channel-resp",s);var t={status:!0,type:"new-join",msgtype:"success",data:e};r.broadcast.emit("channel-event",t)}else{var s={status:!1,msgtype:"error",msg:"Sorry cant join this channel"};r.emit("join-channel-resp",s);var t={status:!0,type:"new-join",msgtype:"error",msg:"Another user is trying to join this channel but max count [ "+h[e.channel].maxAllowed+" ] is reached"};r.broadcast.emit("channel-event",t)}}),r.on("update-channel",function(e){switch(console.log("------------update channel------------- ",e.channel," by ",e.sender," -> ",e),e.type){case"change-userid":var n=h[e.channel].users.indexOf(e.extra.old);console.log("old userid",h[e.channel].users[n]),h[e.channel].users[n]=e.extra.new,console.log("changed userid",h[e.channel].users);break;default:console.log("do nothing ")}}),r.on("presence",function(e,n){var s=!!h[e.channel];console.log(" Presence Check index of ",e.channel," is ",s),r.emit("presence",s)});var c=0;r.on(n,function(n,e){if(!n.remoteUserId||n.remoteUserId!==r.userid)try{if(n.remoteUserId&&"system"!=n.remoteUserId&&n.message.newParticipationRequest&&u[n.remoteUserId]&&u[n.remoteUserId].password){if(3<c)return void r.emit("password-max-tries-over",n.remoteUserId);if(!n.password)return c++,void r.emit("join-with-password",n.remoteUserId);if(n.password!=u[n.remoteUserId].password)return c++,void r.emit("invalid-password",n.remoteUserId,n.password)}if(n.message.shiftedModerationControl)return n.message.firedOnLeave?void(l[n.sender]=n):void o(n);if("system"==n.remoteUserId&&n.message.detectPresence)return n.message.userid===r.userid?void e(!1,r.userid):void e(!!u[n.message.userid],n.message.userid);if(u[n.sender]||(u[n.sender]={socket:r,connectedWith:{},isPublic:!1,extra:{}}),n.message.newParticipationRequest){var s=0;return void function e(){120<++s?r.emit("user-not-found",n.remoteUserId):u[n.remoteUserId]&&u[n.remoteUserId].socket?o(n):setTimeout(e,1e3)}()}o(n)}catch(e){pushLogs("on-socketMessageEvent",e)}}),r.on("disconnect",function(){try{delete r.namespace.sockets[this.id]}catch(e){pushLogs("disconnect",e)}try{var e=l[r.userid];e&&(delete l[e.userid],o(e))}catch(e){pushLogs("disconnect",e)}try{if(u[r.userid])for(var n in u[r.userid].connectedWith)u[r.userid].connectedWith[n].emit("user-disconnected",r.userid),u[n]&&u[n].connectedWith[r.userid]&&(delete u[n].connectedWith[r.userid],u[n].socket.emit("user-disconnected",r.userid))}catch(e){pushLogs("disconnect",e)}delete u[r.userid]}),a&&a(r)})}catch(e){console.error(" Realtime connection threw Exception ",e),console.log(" Retrying Socket.io coonection with log true"),r=r.listen(n,{log:!0,origins:"*:*"})}function f(e){var n=u[e.userid],s={};n&&n.extra&&(s=n.extra),u[e.userid]={socket:e,connectedWith:{},isPublic:!1,extra:s||{}}}return module.getAll=function(e){var n=[];for(i in h)n.push(h[i]);return{response:"channels",channels:n,format:e}},module.getAllChannels=function(e){var n=[];for(i in Object.keys(h))n.push(Object.keys(h)[i]);return{response:"all",channelinfo:n,format:e}},module.getChannel=function(e,n){return{response:"channel",channelinfo:h[e]?h[e]:null,format:n}},module.getAllActiveUsers=function(e){var n=[];for(i in Object.keys(h)){var s=Object.keys(h)[i];for(j in h[s].users)n.push(h[s].users[j])}return{response:"users",users:n,format:e}},module.getUser=function(e,n){return{response:"users",users:t[e]?t[e]:"notfound",format:n}},module.getChannelClients=function(e){return{response:"users",clients:r.of("/"+e).clients(),format:data.format}},console.log("----------------realtimecomm----------------------"),console.log(" Socket.io env => "+e.enviornment+" running at\n "+e.httpsPort),module});try{var _enableLogs=require("./config.json").enableLogs;_enableLogs&&(enableLogs=!0)}catch(e){enableLogs=!1}var fs=require("fs");function pushLogs(){if(enableLogs){var e=process.cwd()+"/logs.json",n=(new Date).toUTCString().replace(/ |-|,|:|\./g,"");uncache(e);var s={};try{s=require(e)}catch(e){}arguments[1]&&arguments[1].stack&&(arguments[1]=arguments[1].stack);try{s[n]=JSON.stringify(arguments,null,"\t"),fs.writeFileSync(e,JSON.stringify(s,null,"\t"))}catch(e){s[n]=arguments.toString()}}}function uncache(n){searchCache(n,function(e){delete require.cache[e.id]}),Object.keys(module.constructor._pathCache).forEach(function(e){0<e.indexOf(n)&&delete module.constructor._pathCache[e]})}function searchCache(e,s){var n=require.resolve(e);n&&void 0!==(n=require.cache[n])&&function n(e){e.children.forEach(function(e){n(e)}),s(e)}(n)}
exports.restapi=function(r,e,s,n){var o=require("restify"),t=o.createServer(e);return t.use(function(e,s,n){return s.header("Access-Control-Allow-Origin","*"),s.header("Access-Control-Allow-Headers","X-Requested-With"),n()}),t.use(o.plugins.acceptParser(t.acceptable)),t.use(o.plugins.dateParser()),t.use(o.plugins.queryParser()),t.use(o.plugins.bodyParser({mapParams:!0})),t.get("/webrtc/details",function(e,s,n){console.log("params----------",e.params),s.json({type:!0,data:e.params.version})}),t.get("/session/all-sessions",function(e,s,n){var o=r.getAllChannels("json");s.json({type:!0,data:o})}),t.get("/session/getsession/:channelid",function(e,s,n){if(console.log(" [ Rest api - getSession ]  logs for ",e.params.channelid),e.params.channelid){var o=r.getChannel(e.params.channelid,"json");s.json({type:!0,data:o})}else s.json({type:!0,data:"channelid is required"})}),t.get("/session/clients",function(e,s,n){var o=r.getChannelClients("json");s.json({type:!0,data:o})}),t.get("/user/all-users",function(e,s,n){var o=r.getAllActiveUsers("json");s.json({type:!0,data:o})}),t.get("/user/getuser/:userid",function(e,s,n){if(console.log(" [ Rest api - getUser ]  logs for ",e.params.userid),e.params.userid){var o=r.getUser(e.params.userid,"json");s.json({type:!0,data:o})}else s.json({type:!0,data:"userid is required"})}),t.on("MethodNotAllowed",function(e,s){if("options"===e.method.toLowerCase())return-1===s.methods.indexOf("OPTIONS")&&s.methods.push("OPTIONS"),s.header("Access-Control-Allow-Credentials",!0),s.header("Access-Control-Allow-Headers",["Accept","Accept-Version","Content-Type","Api-Version","Origin","X-Requested-With"].join(", ")),s.header("Access-Control-Allow-Methods",s.methods.join(", ")),s.header("Access-Control-Allow-Origin",e.headers.origin),s.send(204);return s.send(new o.MethodNotAllowedError)}),t.listen(n.restPort,function(){console.log("%s listening at %s",t.name,t.url)}),console.log("----------------------REST APIs ----------------"),console.log(" REST server env => "+n.enviornment+" running at\n "+n.restPort),module};